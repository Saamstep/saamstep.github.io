"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fp = require("lodash/fp");

var _fp2 = _interopRequireDefault(_fp);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var listRootModules = _fp2.default.flow(_utils.listRequiredModules, _fp2.default.keyBy(_path2.default.basename));
var listIconModules = _fp2.default.flow(_utils.listRequiredModules, _fp2.default.keyBy(_fp2.default.flow(_fp2.default.camelCase, _fp2.default.upperFirst)));

var rootModuleName = "material-ui";
var iconsModuleName = "material-ui/svg-icons";

var rootModules = listRootModules(rootModuleName);
var iconModules = listIconModules(iconsModuleName);

var createTransformerSettings = function createTransformerSettings(sourceValue) {
  switch (sourceValue) {
    case rootModuleName:
      return { index: rootModuleName, modules: rootModules };
    case iconsModuleName:
      return { index: iconsModuleName, modules: iconModules };
    default:
      return null;
  }
};

exports.default = function (_ref) {
  var types = _ref.types;
  return {
    visitor: {
      ImportDeclaration(path) {
        var _path$node = path.node,
            source = _path$node.source,
            specifiers = _path$node.specifiers;


        if (specifiers.length === 0) {
          return;
        }

        var settings = createTransformerSettings(source.value);

        if (settings === null) {
          return;
        }

        var importSpecifiers = specifiers.filter(function (spec) {
          return types.isImportSpecifier(spec);
        });

        if (importSpecifiers.length < specifiers.length) {
          return;
        }

        importSpecifiers.forEach(function (spec) {
          var name = spec.imported.name;

          var modulePath = settings.modules[name];

          if (!modulePath) {
            throw new Error(`${settings.index} does not contain module "${name}"`);
          }

          var specifiers = [types.importDefaultSpecifier(types.identifier(spec.local.name))];

          path.insertBefore(types.importDeclaration(specifiers, types.stringLiteral(`${settings.index}/${modulePath}`)));
        });

        path.remove();
      }
    }
  };
};